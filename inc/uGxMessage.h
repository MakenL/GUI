/** @file     uGxMessage.h
    @author   Lyga Maksim
    @version  V1.0
    @date     11.08.2015
    @brief    Модуль реализующий функции очереди сообщений в библиотеке uGx.
 */

#ifndef __uGx_MESSAGE_H
#define __uGx_MESSAGE_H

#ifdef __cplusplus
extern "C" {
#endif

/* ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ
 *************************************************************************************************/

#include "stdint.h"
#include "stddef.h"

/* КОНСТАНТЫ
 *************************************************************************************************/

/* МАКРОСЫ
 *************************************************************************************************/
	
/* ОПРЕДЕЛЕНИЕ ТИПОВ
 *************************************************************************************************/	 

/// Идентификатор источника сообщения
typedef enum 
{
  uGx_MSG_SOURCE_UNKNOWN  = 0, ///< неизвестный источник
  uGx_MSG_SOURCE_KEYBOARD = 1, ///< клавиатура
  uGx_MSG_SOURCE_ENCODER  = 2, ///< сенсорный экран
  uGx_MSG_SOURCE_TIMER    = 3, ///< таймер
  uGx_MSG_SOURCE_SYSTEM   = 4  ///< система	
} uGxMsgSource_t;
	
/// Идентификатор типа события
typedef enum
{
	uGx_MSG_EVENT_INVALID      = 0, ///< ошибочное событие
  uGx_MSG_EVENT_KEY_PRESS    = 1, ///< нажатие кнопки
  uGx_MSG_EVENT_KEY_RELEASE  = 2, ///< отпускание кнопки
  uGx_MSG_EVENT_ENC_UP       = 3, ///< вращение энкодера по часовой стрелке
  uGx_MSG_EVENT_ENC_DOWN     = 4, ///< вращение энкодера против часовой стрелке
} uGxMsgEvent_t;

/// Структура сообщения графической библиотеки
typedef struct 
{
    uGxMsgSource_t Source; ///< идентификатор источника сообщения
    uGxMsgEvent_t  Event;  ///< идентификатор типа события
    uint16_t       Param1; ///< дополнительный параметр сообщения 1
    uint16_t       Param2; ///< дополнительный параметр сообщения 2
} uGxMsg_t;

/* ОПРЕДЕЛЕНИЕ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ
 *************************************************************************************************/

/* ПРОТОТИПЫ ГЛОБАЛЬНЫХ ФУНКЦИЙ
 *************************************************************************************************/	

// Функция инициализации очереди сообщений
void uGx_Msg_Init(void);
// Функция очистки очереди сообщений
void uGx_Msg_Clear(void);
/// Функция создания сообщений графической библиотеки
void uGx_Msg_Create(uGxMsgSource_t Source, uGxMsgEvent_t Event, uint16_t Param1, uint16_t Param2);
/// Функция чтения сообщений из буфера
uGxMsg_t* uGx_Msg_Read(uGxMsg_t *const pMsg);

#ifdef __cplusplus
}
#endif

#endif
/*
** КОНЕЦ ФАЙЛА
***********************************************************************************************/
